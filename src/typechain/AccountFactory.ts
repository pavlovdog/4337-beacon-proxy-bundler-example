/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AccountFactoryInterface extends utils.Interface {
  functions: {
    "accountInitializer()": FunctionFragment;
    "addStake(uint32)": FunctionFragment;
    "beacon()": FunctionFragment;
    "beaconProxy()": FunctionFragment;
    "deployAccount(address)": FunctionFragment;
    "deriveAccount(address)": FunctionFragment;
    "entryPoint()": FunctionFragment;
    "getAccountSalt(address)": FunctionFragment;
    "getBeaconProxyCreationCode()": FunctionFragment;
    "getBeaconProxyInitHash()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payMaster()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockStake()": FunctionFragment;
    "withdrawStake(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountInitializer"
      | "addStake"
      | "beacon"
      | "beaconProxy"
      | "deployAccount"
      | "deriveAccount"
      | "entryPoint"
      | "getAccountSalt"
      | "getBeaconProxyCreationCode"
      | "getBeaconProxyInitHash"
      | "initialize"
      | "owner"
      | "payMaster"
      | "renounceOwnership"
      | "transferOwnership"
      | "unlockStake"
      | "withdrawStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountInitializer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "beacon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beaconProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountSalt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeaconProxyCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeaconProxyInitHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payMaster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountInitializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beaconProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeaconProxyCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeaconProxyInitHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payMaster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "AccountDeployed(address,address)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AccountDeployedEventObject {
  accountOwner: string;
  account: string;
}
export type AccountDeployedEvent = TypedEvent<
  [string, string],
  AccountDeployedEventObject
>;

export type AccountDeployedEventFilter = TypedEventFilter<AccountDeployedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AccountFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountInitializer(overrides?: CallOverrides): Promise<[string]>;

    addStake(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    beacon(overrides?: CallOverrides): Promise<[string]>;

    beaconProxy(overrides?: CallOverrides): Promise<[string]>;

    deployAccount(
      accountOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deriveAccount(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<[string] & { account: string }>;

    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    getAccountSalt(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBeaconProxyCreationCode(overrides?: CallOverrides): Promise<[string]>;

    getBeaconProxyInitHash(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      __owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payMaster(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unlockStake(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  accountInitializer(overrides?: CallOverrides): Promise<string>;

  addStake(
    unstakeDelaySec: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  beacon(overrides?: CallOverrides): Promise<string>;

  beaconProxy(overrides?: CallOverrides): Promise<string>;

  deployAccount(
    accountOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deriveAccount(
    accountOwner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  entryPoint(overrides?: CallOverrides): Promise<string>;

  getAccountSalt(
    accountOwner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getBeaconProxyCreationCode(overrides?: CallOverrides): Promise<string>;

  getBeaconProxyInitHash(overrides?: CallOverrides): Promise<string>;

  initialize(
    __owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payMaster(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unlockStake(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawStake(
    withdrawAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountInitializer(overrides?: CallOverrides): Promise<string>;

    addStake(
      unstakeDelaySec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beacon(overrides?: CallOverrides): Promise<string>;

    beaconProxy(overrides?: CallOverrides): Promise<string>;

    deployAccount(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deriveAccount(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    entryPoint(overrides?: CallOverrides): Promise<string>;

    getAccountSalt(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getBeaconProxyCreationCode(overrides?: CallOverrides): Promise<string>;

    getBeaconProxyInitHash(overrides?: CallOverrides): Promise<string>;

    initialize(__owner: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payMaster(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockStake(overrides?: CallOverrides): Promise<void>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountDeployed(address,address)"(
      accountOwner?: null,
      account?: null
    ): AccountDeployedEventFilter;
    AccountDeployed(
      accountOwner?: null,
      account?: null
    ): AccountDeployedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    accountInitializer(overrides?: CallOverrides): Promise<BigNumber>;

    addStake(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    beacon(overrides?: CallOverrides): Promise<BigNumber>;

    beaconProxy(overrides?: CallOverrides): Promise<BigNumber>;

    deployAccount(
      accountOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deriveAccount(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountSalt(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBeaconProxyCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    getBeaconProxyInitHash(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      __owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payMaster(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unlockStake(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountInitializer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStake(
      unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    beacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beaconProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployAccount(
      accountOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deriveAccount(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountSalt(
      accountOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBeaconProxyCreationCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBeaconProxyInitHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      __owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unlockStake(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
